# Generated by Django 4.1.7 on 2023-03-05 09:58

import college.models
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Adresse email')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='Prénom')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='Nom de famille')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('last_login', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Dernier login')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('is_staff', models.BooleanField(default=False, verbose_name='SuperAdmin')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', college.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CodePromo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codepromo_code', models.CharField(max_length=20, verbose_name='Le code à introduire')),
                ('codepromo_montant', models.FloatField(blank=True, default=0, verbose_name='Montant fixe de réduction')),
                ('codepromo_pourcentage', models.FloatField(blank=True, default=0, verbose_name='Pourcentage de reduction sur le prix total')),
            ],
        ),
        migrations.CreateModel(
            name='Evenement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('even_nom', models.CharField(max_length=200, unique=True, verbose_name="Nom de l'événement")),
                ('even_description', models.CharField(max_length=1000, verbose_name="Description de l'évènement")),
                ('even_illustration', models.ImageField(blank=True, null=True, upload_to='Images/', verbose_name="Image(s) de l'évènement(s)")),
                ('configuration_salle', models.CharField(choices=[('1', 'classique'), ('2', 'espacée'), ('3', 'proche')], default='classique', max_length=2000, verbose_name='Configuration de la salle')),
                ('even_duree', models.TimeField(default='02:00', verbose_name="Durée de l'événement")),
                ('admin', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('code_promo', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='college.codepromo')),
            ],
        ),
        migrations.CreateModel(
            name='Representation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('repr_date', models.DateTimeField(default=datetime.datetime(2023, 3, 5, 10, 58, 3, 130152), verbose_name='Date')),
            ],
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reserv_email', models.EmailField(max_length=254, verbose_name='Adresse mail de la reservation')),
                ('reserv_nom', models.CharField(max_length=50, verbose_name='Nom de la personne qui a réserver')),
                ('reserv_prenom', models.CharField(max_length=50, verbose_name='Prénom de la personne qui réserve')),
                ('reserv_tel', models.CharField(max_length=10, verbose_name='Numéro de tel de la personne qui réserve')),
                ('reserv_date', models.DateTimeField(default=datetime.datetime(2023, 3, 5, 10, 58, 3, 130152), verbose_name='Date de la réservation')),
                ('reserv_remarque', models.CharField(max_length=1000, verbose_name='Remarque sur la réservation')),
                ('reserv_numero', models.IntegerField(verbose_name='Numéro du ticket pour le spectatcle')),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_boisson', models.IntegerField(default=0, verbose_name='Ticket boisson pris avec la réservation')),
                ('ticket_nourriture', models.IntegerField(default=0, verbose_name='Ticket nourriture pris avec la réservation')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype')),
                ('reservation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='college.reservation')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='InfoSalle',
            fields=[
                ('representation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='college.representation')),
                ('salle_places_restantes', models.JSONField(verbose_name='Informations de la salle')),
            ],
        ),
        migrations.CreateModel(
            name='TicketAssis',
            fields=[
                ('ticket_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='college.ticket')),
                ('ticket_siege', models.CharField(max_length=3, verbose_name='Trigramme du siège')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('college.ticket',),
        ),
        migrations.CreateModel(
            name='TicketDebout',
            fields=[
                ('ticket_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='college.ticket')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('college.ticket',),
        ),
        migrations.AddField(
            model_name='representation',
            name='reservation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='college.reservation'),
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('place_nom', models.CharField(max_length=50, verbose_name='Nom de la place')),
                ('place_prix', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Prix de la place')),
                ('evenement', models.ManyToManyField(to='college.evenement')),
                ('ticket', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='college.ticket')),
            ],
        ),
        migrations.AddField(
            model_name='evenement',
            name='representation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='college.representation'),
        ),
        migrations.CreateModel(
            name='Configuration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('config_nom', models.CharField(blank=True, max_length=30, unique=True, verbose_name='Nom de configuration')),
                ('config_disposition', models.JSONField(verbose_name='Disposition de la salle')),
                ('evenement', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='college.evenement')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='config',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='college.configuration'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
